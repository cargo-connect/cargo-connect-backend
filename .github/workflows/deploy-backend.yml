name: Deploy Backend to AWS EC2

on:
  workflow_dispatch:
  push:
    branches:
      - main 

permissions:
  id-token: write # Required for OIDC authentication
  contents: read  # Required to check out the code

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # Provided via GitHub secrets 
          aws-region: ${{ secrets.AWS_REGION }}           # Provided via GitHub secrets
          role-session-name: GitHubActionsBackendDeployEC2 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }} # Use the full URL from secrets
          IMAGE_TAG: ${{ github.sha }} # Use commit SHA as the image tag
        run: |
          echo "Building image..."
          docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG .
          echo "Pushing image $ECR_REPOSITORY_URL:$IMAGE_TAG..."
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
          echo "image_uri=$ECR_REPOSITORY_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT # Output the full URI

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        env: # Environment variables passed to the SSH script's context
          IMAGE_URI: ${{ steps.build-image.outputs.IMAGE_URI }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          # Pass secrets needed by the application
          DATABASE_URL_SECRET: ${{ secrets.DATABASE_URL }} # Should be sqlite:////app/cargoconnect.db
          SECRET_KEY_SECRET: ${{ secrets.SECRET_KEY }}
          MAIL_SERVER_SECRET: ${{ secrets.MAIL_SERVER }}
          MAIL_USERNAME_SECRET: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD_SECRET: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_SECRET: ${{ secrets.MAIL_FROM }}
          # Add any other required env vars here
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Waiting 60 seconds for instance initialization (user_data)..."
            sleep 60           
            echo "Logging into ECR..."
            # Assumes AWS CLI is installed on EC2 and the instance has an IAM role with ECR permissions
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "Pulling new image: ${{ steps.build-image.outputs.IMAGE_URI }}"
            docker pull ${{ steps.build-image.outputs.IMAGE_URI }}

            echo "Stopping and removing existing container..."
            docker stop cargo-connect-app || true # Ignore error if container doesn't exist
            docker rm cargo-connect-app || true # Ignore error if container doesn't exist

            echo "Starting new container with secrets..."
            # Note: Ensure the database volume path on EC2 exists and has correct permissions if its needed.
            # For SQLite persistence, add: -v /path/on/ec2/cargoconnect.db:/app/cargoconnect.db
            docker run -d --name cargo-connect-app -p 127.0.0.1:8000:8000 --restart always \
              -e ENVIRONMENT=dev \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e MAIL_SERVER="${{ secrets.MAIL_SERVER }}" \
              -e MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" \
              -e MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" \
              -e MAIL_FROM="${{ secrets.MAIL_FROM }}" \
              ${{ steps.build-image.outputs.IMAGE_URI }}

            echo "Deployment via SSH completed successfully."
            # Optional: Add a 'docker ps' or 'curl localhost:8000' here to verify
